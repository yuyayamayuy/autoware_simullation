<?xml version="1.0"?>
<launch>
  <!-- Lidar + Camera detector parameters -->
  <arg name="lidar_detection_model_type" description="options: `transfusion`, `centerpoint`, `pointpainting`, `apollo`, `clustering`"/>
  <arg name="lidar_detection_model_name" description="options: `transfusion`, `centerpoint`, `centerpoint_tiny`, `centerpoint_sigma`, `pointpainting`"/>
  <arg name="use_roi_based_cluster"/>
  <arg name="use_low_intensity_cluster_filter"/>
  <arg name="use_image_segmentation_based_filter"/>

  <!-- External interfaces -->
  <arg name="number_of_cameras"/>
  <arg name="input/camera0/image"/>
  <arg name="input/camera0/info"/>
  <arg name="input/camera0/rois"/>
  <arg name="input/camera1/image"/>
  <arg name="input/camera1/info"/>
  <arg name="input/camera1/rois"/>
  <arg name="input/camera2/image"/>
  <arg name="input/camera2/info"/>
  <arg name="input/camera2/rois"/>
  <arg name="input/camera3/image"/>
  <arg name="input/camera3/info"/>
  <arg name="input/camera3/rois"/>
  <arg name="input/camera4/image"/>
  <arg name="input/camera4/info"/>
  <arg name="input/camera4/rois"/>
  <arg name="input/camera5/image"/>
  <arg name="input/camera5/info"/>
  <arg name="input/camera5/rois"/>
  <arg name="input/camera6/image"/>
  <arg name="input/camera6/info"/>
  <arg name="input/camera6/rois"/>
  <arg name="input/camera7/image"/>
  <arg name="input/camera7/info"/>
  <arg name="input/camera7/rois"/>

  <arg name="node/pointcloud_container"/>
  <arg name="input/pointcloud"/>
  <arg name="input/pointcloud_map/pointcloud"/>
  <arg name="input/obstacle_segmentation/pointcloud"/>

  <arg name="output/ml_detector/objects"/>
  <arg name="output/rule_detector/objects"/>

  <!-- Jetson AGX -->
  <!-- <include file="$(find-pkg-share autoware_tensorrt_yolox)/launch/multiple_yolox.launch.xml">
    <arg name="image_raw0" value="$(var input/camera0/image)"/>
    <arg name="image_raw1" value="$(var input/camera1/image)"/>
    <arg name="image_raw2" value="$(var input/camera2/image)"/>
    <arg name="image_raw3" value="$(var input/camera3/image)"/>
    <arg name="image_raw4" value="$(var input/camera4/image)"/>
    <arg name="image_raw5" value="$(var input/camera5/image)"/>
    <arg name="image_raw6" value="$(var input/camera6/image)"/>
    <arg name="image_raw7" value="$(var input/camera7/image)"/>
    <arg name="image_number" value="$(var number_of_cameras)"/>
  </include> -->

  <!-- PointPainting -->
  <group if="$(eval &quot;'$(var lidar_detection_model_type)'=='pointpainting'&quot;)">
    <let name="lidar_detection_model_name" value="$(eval &quot;'pointpainting' if ''=='$(var lidar_detection_model_name)' else '$(var lidar_detection_model_name)'&quot;)"/>
    <push-ros-namespace namespace="pointpainting"/>
    <include file="$(find-pkg-share autoware_image_projection_based_fusion)/launch/pointpainting_fusion.launch.xml">
      <arg name="input/rois_number" value="$(var number_of_cameras)"/>
      <arg name="input/rois0" value="$(var input/camera0/rois)"/>
      <arg name="input/rois1" value="$(var input/camera1/rois)"/>
      <arg name="input/rois2" value="$(var input/camera2/rois)"/>
      <arg name="input/rois3" value="$(var input/camera3/rois)"/>
      <arg name="input/rois4" value="$(var input/camera4/rois)"/>
      <arg name="input/rois5" value="$(var input/camera5/rois)"/>
      <arg name="input/rois6" value="$(var input/camera6/rois)"/>
      <arg name="input/rois7" value="$(var input/camera7/rois)"/>
      <arg name="input/camera_info0" value="$(var input/camera0/info)"/>
      <arg name="input/camera_info1" value="$(var input/camera1/info)"/>
      <arg name="input/camera_info2" value="$(var input/camera2/info)"/>
      <arg name="input/camera_info3" value="$(var input/camera3/info)"/>
      <arg name="input/camera_info4" value="$(var input/camera4/info)"/>
      <arg name="input/camera_info5" value="$(var input/camera5/info)"/>
      <arg name="input/camera_info6" value="$(var input/camera6/info)"/>
      <arg name="input/camera_info7" value="$(var input/camera7/info)"/>
      <arg name="input/image0" value="$(var input/camera0/image)"/>
      <arg name="input/image1" value="$(var input/camera1/image)"/>
      <arg name="input/image2" value="$(var input/camera2/image)"/>
      <arg name="input/image3" value="$(var input/camera3/image)"/>
      <arg name="input/image4" value="$(var input/camera4/image)"/>
      <arg name="input/image5" value="$(var input/camera5/image)"/>
      <arg name="input/image6" value="$(var input/camera6/image)"/>
      <arg name="input/image7" value="$(var input/camera7/image)"/>
      <arg name="input/pointcloud" value="$(var input/pointcloud)"/>
      <arg name="output/objects" value="$(var output/ml_detector/objects)"/>

      <arg name="model_name" value="$(var lidar_detection_model_name)"/>
      <arg name="model_path" value="$(var pointpainting_model_path)"/>
      <arg name="model_param_path" value="$(var lidar_model_param_path)/$(var lidar_detection_model_name).param.yaml"/>
      <arg name="ml_package_param_path" value="$(var model_path)/$(var lidar_detection_model_name)_ml_package.param.yaml"/>
      <arg name="class_remapper_param_path" value="$(var model_path)/detection_class_remapper.param.yaml"/>
      <arg name="use_pointcloud_container" value="true"/>
      <arg name="pointcloud_container_name" value="$(var node/pointcloud_container)"/>
    </include>
  </group>

  <!-- Image_segmentation based filter, apply for camera0 only-->
  <group>
    <include file="$(find-pkg-share autoware_image_projection_based_fusion)/launch/segmentation_pointcloud_fusion.launch.xml" if="$(var use_image_segmentation_based_filter)">
      <arg name="input/pointcloud" value="$(var input/pointcloud_map/pointcloud)"/>
      <arg name="output/pointcloud" value="/perception/object_recognition/detection/segmentation_based_filtered/pointcloud"/>
    </include>
  </group>

  <!-- Clustering -->
  <group>
    <push-ros-namespace namespace="clustering"/>
    <group>
      <let name="euclidean_cluster_input" value="$(var input/pointcloud_map/pointcloud)" unless="$(var use_image_segmentation_based_filter)"/>
      <let name="euclidean_cluster_input" value="/perception/object_recognition/detection/segmentation_based_filtered/pointcloud" if="$(var use_image_segmentation_based_filter)"/>
      <let name="euclidean_cluster_output" value="euclidean_cluster/clusters" if="$(var use_roi_based_cluster)"/>
      <let name="euclidean_cluster_output" value="clusters" unless="$(var use_roi_based_cluster)"/>
      <include file="$(find-pkg-share autoware_euclidean_cluster)/launch/voxel_grid_based_euclidean_cluster.launch.xml">
        <arg name="input_pointcloud" value="$(var euclidean_cluster_input)"/>
        <arg name="output_clusters" value="$(var euclidean_cluster_output)"/>
        <arg name="use_low_height_cropbox" value="$(var use_low_height_cropbox)"/>
      </include>
    </group>

    <!-- roi based clustering -->
    <group>
      <push-ros-namespace namespace="roi_cluster"/>
      <group>
        <include file="$(find-pkg-share autoware_image_projection_based_fusion)/launch/roi_pointcloud_fusion.launch.xml" if="$(var use_roi_based_cluster)">
          <arg name="input/rois_number" value="$(var number_of_cameras)"/>
          <arg name="input/rois0" value="$(var input/camera0/rois)"/>
          <arg name="input/rois1" value="$(var input/camera1/rois)"/>
          <arg name="input/rois2" value="$(var input/camera2/rois)"/>
          <arg name="input/rois3" value="$(var input/camera3/rois)"/>
          <arg name="input/rois4" value="$(var input/camera4/rois)"/>
          <arg name="input/rois5" value="$(var input/camera5/rois)"/>
          <arg name="input/rois6" value="$(var input/camera6/rois)"/>
          <arg name="input/rois7" value="$(var input/camera7/rois)"/>
          <arg name="input/camera_info0" value="$(var input/camera0/info)"/>
          <arg name="input/camera_info1" value="$(var input/camera1/info)"/>
          <arg name="input/camera_info2" value="$(var input/camera2/info)"/>
          <arg name="input/camera_info3" value="$(var input/camera3/info)"/>
          <arg name="input/camera_info4" value="$(var input/camera4/info)"/>
          <arg name="input/camera_info5" value="$(var input/camera5/info)"/>
          <arg name="input/camera_info6" value="$(var input/camera6/info)"/>
          <arg name="input/camera_info7" value="$(var input/camera7/info)"/>
          <arg name="input/image0" value="$(var input/camera0/image)"/>
          <arg name="input/image1" value="$(var input/camera1/image)"/>
          <arg name="input/image2" value="$(var input/camera2/image)"/>
          <arg name="input/image3" value="$(var input/camera3/image)"/>
          <arg name="input/image4" value="$(var input/camera4/image)"/>
          <arg name="input/image5" value="$(var input/camera5/image)"/>
          <arg name="input/image6" value="$(var input/camera6/image)"/>
          <arg name="input/image7" value="$(var input/camera7/image)"/>
          <arg name="input/pointcloud" value="$(var input/pointcloud_map/pointcloud)"/>
          <arg name="output_clusters" value="clusters"/>
          <arg name="param_path" value="$(var roi_pointcloud_fusion_param_path)"/>
        </include>
      </group>
    </group>

    <!-- simple_cluster_merger -->
    <group>
      <include file="$(find-pkg-share autoware_cluster_merger)/launch/cluster_merger.launch.xml" if="$(var use_roi_based_cluster)">
        <arg name="input/cluster0" value="euclidean_cluster/clusters"/>
        <arg name="input/cluster1" value="roi_cluster/clusters"/>
        <arg name="output/clusters" value="clusters"/>
      </include>
    </group>

    <group>
      <include file="$(find-pkg-share autoware_shape_estimation)/launch/shape_estimation.launch.xml">
        <arg name="input/objects" value="clusters"/>
        <arg name="output/objects" value="objects_with_feature"/>
      </include>
    </group>

    <group>
      <let name="input/clustering" value="/perception/object_recognition/detection/clustering/clusters"/>
      <push-ros-namespace namespace="camera_lidar_fusion"/>
      <!-- Fusion camera-lidar to classify -->

      <!-- euclidean clustering -->
      <group>
        <include file="$(find-pkg-share autoware_image_projection_based_fusion)/launch/roi_cluster_fusion.launch.xml">
          <arg name="input/rois_number" value="$(var number_of_cameras)"/>
          <arg name="input/rois0" value="$(var input/camera0/rois)"/>
          <arg name="input/rois1" value="$(var input/camera1/rois)"/>
          <arg name="input/rois2" value="$(var input/camera2/rois)"/>
          <arg name="input/rois3" value="$(var input/camera3/rois)"/>
          <arg name="input/rois4" value="$(var input/camera4/rois)"/>
          <arg name="input/rois5" value="$(var input/camera5/rois)"/>
          <arg name="input/rois6" value="$(var input/camera6/rois)"/>
          <arg name="input/rois7" value="$(var input/camera7/rois)"/>
          <arg name="input/camera_info0" value="$(var input/camera0/info)"/>
          <arg name="input/camera_info1" value="$(var input/camera1/info)"/>
          <arg name="input/camera_info2" value="$(var input/camera2/info)"/>
          <arg name="input/camera_info3" value="$(var input/camera3/info)"/>
          <arg name="input/camera_info4" value="$(var input/camera4/info)"/>
          <arg name="input/camera_info5" value="$(var input/camera5/info)"/>
          <arg name="input/camera_info6" value="$(var input/camera6/info)"/>
          <arg name="input/camera_info7" value="$(var input/camera7/info)"/>
          <arg name="input/image0" value="$(var input/camera0/image)"/>
          <arg name="input/image1" value="$(var input/camera1/image)"/>
          <arg name="input/image2" value="$(var input/camera2/image)"/>
          <arg name="input/image3" value="$(var input/camera3/image)"/>
          <arg name="input/image4" value="$(var input/camera4/image)"/>
          <arg name="input/image5" value="$(var input/camera5/image)"/>
          <arg name="input/image6" value="$(var input/camera6/image)"/>
          <arg name="input/image7" value="$(var input/camera7/image)"/>
          <arg name="input/clusters" value="$(var input/clustering)"/>
          <arg name="output/clusters" value="clusters"/>
          <arg name="param_path" value="$(var roi_cluster_fusion_param_path)"/>
        </include>
      </group>

      <!-- low_intensity_cluster_filter -->
      <group>
        <include file="$(find-pkg-share autoware_raindrop_cluster_filter)/launch/low_intensity_cluster_filter.launch.xml" if="$(var use_low_intensity_cluster_filter)">
          <arg name="input/objects" value="clusters"/>
          <arg name="output/objects" value="filtered/clusters"/>
        </include>
      </group>

      <group>
        <let name="shape_estimation/input" value="filtered/clusters" if="$(var use_low_intensity_cluster_filter)"/>
        <let name="shape_estimation/input" value="clusters" unless="$(var use_low_intensity_cluster_filter)"/>
        <include file="$(find-pkg-share autoware_shape_estimation)/launch/shape_estimation.launch.xml">
          <arg name="input/objects" value="$(var shape_estimation/input)"/>
          <arg name="output/objects" value="objects_with_feature"/>
        </include>
      </group>
      <!-- convert DynamicObjectsWithFeatureArray to DynamicObjects -->
      <group>
        <include file="$(find-pkg-share autoware_detected_object_feature_remover)/launch/detected_object_feature_remover.launch.xml">
          <arg name="input" value="objects_with_feature"/>
          <arg name="output" value="$(var output/rule_detector/objects)"/>
        </include>
      </group>
    </group>
  </group>
</launch>
